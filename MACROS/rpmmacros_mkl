########################################################################
# BLAS + LAPACK                                                        #
########################################################################

%global tpls_blas %{lua: \
 local prefix = rpm.expand("%{?tpls_prefix}") \
 if rpm.expand("%{?tpls_libs}") == "static" then \
     rpm.define("tpls_blas " .. prefix .. "/lib/libblas.a") \
 else \
     rpm.define("tpls_blas " .. prefix .. "/lib/libblas.so") \
 end \
}

%global tpls_lapack %{lua: \
 local prefix = rpm.expand("%{?tpls_prefix}") \
 if rpm.expand("%{?tpls_libs}") == "static" then \
     rpm.define("tpls_lapack " .. prefix .. "/lib/liblapack.a") \
 else \
     rpm.define("tpls_lapack " .. prefix .. "/lib/liblapack.so") \
 end \
}

%global tpls_scalapack %{lua: \
 local prefix = rpm.expand("%{?tpls_prefix}") \
 if rpm.expand("%{?tpls_libs}") == "static" then \
     rpm.define("tpls_scalapack " .. prefix .. "/lib/libscalapack.a") \
 else \
     rpm.define("tpls_scalapack " .. prefix .. "/lib/libscalapack.so") \
 end \
}


%global error_if_not_lapack() { \
  if [ "%{tpls_gpu}" != "lapack" ] || [ "%{tpls_compiler}" != "gnu" ]; then \
    echo "Error: We only want to compile this library for tpls-gnu-lapack-* flavors!"; \
    exit 1; \
  fi; \
}

########################################################################
# MKL                                                                  #
########################################################################


%global mkl_scalapack %{lua: \
local intsize = rpm.expand("%{?tpls_intsize}") \
if intsize == "32" then \
    rpm.define("mkl_scalapack mkl_scalapack_lp64") \
else \
    rpm.define("mkl_scalapack mkl_scalapack_ilp64") \
end \
}

%global mkl_intel %{lua: \
local intsize = rpm.expand("%{?tpls_intsize}") \
if intsize == "32" then \
    rpm.define("mkl_intel mkl_intel_lp64") \
else \
    rpm.define("mkl_intel mkl_intel_ilp64") \
end \
}

%global mkl_thread %{lua: \
local compiler = rpm.expand("%{?tpls_compiler}") \
if compiler == "intel" then \
    rpm.define("mkl_thread mkl_intel_thread") \
elseif compiler == "nvidia" then \
    rpm.define("mkl_thread mkl_pgi_thread") \
else \
    rpm.define("mkl_thread mkl_gnu_thread") \
end \
}

%global mkl_blacs %{lua: \
local intsize = rpm.expand("%{?tpls_intsize}") \
local mpi = rpm.expand("%{?tpls_mpi}") \
if mpi == "openmpi" then \
    if intsize == "32" then \
        rpm.define("mkl_blacs mkl_blacs_openmpi_lp64") \
    else \
        rpm.define("mkl_blacs mkl_blacs_openmpi_ilp64") \
    end \
else \
    if intsize == "32" then \
        rpm.define("mkl_blacs mkl_blacs_intelmpi_lp64") \
    else \
        rpm.define("mkl_blacs mkl_blacs_intelmpi_ilp64") \
    end \
end \
}

%global omplib %{lua: \
local compiler = rpm.expand("%{?tpls_compiler}") \
local comproot = rpm.expand("%{?tpls_comproot}") \
if compiler == "intel" then \
    local libs = rpm.expand("%{?tpls_libs}") \
    if libs == "static" then \
        rpm.define("omplib " .. comproot .. "lib/liomp5.a") \
    else \
        rpm.define("omplib " .. comproot .. "lib/liomp5.so") \
    end \
elseif compiler == "nvidia" then \
    rpm.define("omplib -mp") \
else \
    rpm.define("omplib -lgomp") \
end \
}


%global mkl_linker_flags %{lua: \
local libs = rpm.expand("%{?tpls_libs}") \
local mklroot = rpm.expand("%{?tpls_mklroot}") \
local omplib = rpm.expand("%{omplib}") \
if libs == "static" then \
    local libprefix = " " .. mklroot .. "/lib/lib" \
    local mkl_intel = libprefix .. rpm.expand("%{mkl_intel}") .. ".a" \
    local mkl_core = libprefix .. "mkl_core.a" \
    local mkl_thread = libprefix .. rpm.expand("%{mkl_thread}") .. ".a" \
    rpm.define("mkl_linker_flags -Wl,--start-group" .. mkl_intel .. mkl_thread .. mkl_core .. " -Wl,--end-group " .. omplib .. " -lpthread -lm -ldl") \
else \
    local libdir = mklroot .. "/lib" \
    local mkl_intel = " -l" .. rpm.expand("%{mkl_intel}") \
    local mkl_core = " -lmkl_core" \
    local mkl_thread = " -l" .. rpm.expand("%{mkl_thread}") \
    rpm.define("mkl_linker_flags -L" .. libdir .. " -Wl,-rpath," .. libdir .. mkl_intel .. mkl_thread .. mkl_core .. " " .. omplib .. " -lpthread -lm -ldl") \
end \
}

%global mkl_mpi_linker_flags %{lua: \
local libs = rpm.expand("%{?tpls_libs}") \
local mklroot = rpm.expand("%{?tpls_mklroot}") \
local omplib = rpm.expand("%{omplib}") \
if libs == "static" then \
    local libprefix = " " .. mklroot .. "/lib/lib" \
    local mkl_scalapack = libprefix .. rpm.expand("%{mkl_scalapack}") .. ".a" \
    local mkl_intel = libprefix .. rpm.expand("%{mkl_intel}") .. ".a" \
    local mkl_core = libprefix .. "mkl_core.a" \
    local mkl_thread = libprefix .. rpm.expand("%{mkl_thread}") .. ".a" \
    local mkl_blacs = libprefix .. rpm.expand("%{mkl_blacs}") .. ".a" \
    rpm.define("mkl_mpi_linker_flags " .. mkl_scalapack .. " -Wl,--start-group" .. mkl_intel .. " " .. mkl_core .. " " .. mkl_thread .. " " .. mkl_blacs .. " -Wl,--end-group " .. omplib .. " -lpthread -lm -ldl") \
else \
    local libdir = mklroot .. "/lib" \
    local mkl_scalapack = " -l" .. rpm.expand("%{mkl_scalapack}") \
    local mkl_intel = " -l" .. rpm.expand("%{mkl_intel}") \
    local mkl_core = " -lmkl_core" \
    local mkl_thread = " -l" .. rpm.expand("%{mkl_thread}") \
    local mkl_blacs = " -l" .. rpm.expand("%{mkl_blacs}") \
    rpm.define("mkl_mpi_linker_flags -L" .. libdir .. " -Wl,-rpath," .. libdir .. mkl_scalapack .. mkl_intel .. mkl_thread .. mkl_core .. mkl_blacs .. " " .. omplib .. " -lpthread -lm -ldl") \
end \
}

%global mkl_compiler_flags %{lua: \
local mklroot = rpm.expand("%{?tpls_mklroot}") \
if rpm.expand("%{?tpls_intsize}") == "32" then \
    rpm.define("mkl_compiler_flags -I" .. mklroot .. "/include") \
else \
    rpm.define("mkl_compiler_flags -DMKL_ILP64 -I" .. mklroot .. "/include") \
end \
}
